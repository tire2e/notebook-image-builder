#!/usr/bin/with-contenv bash
echo "${USER_NAME}:${USER_PASSWORD}" | chpasswd

# symlink out ssh config directory
if [ ! -L /etc/ssh ];then
    ssh-keygen -A
fi

# password access
if [ "$PASSWORD_ACCESS" == "true" ]; then
    sed -i '/^#PasswordAuthentication/c\PasswordAuthentication yes' /etc/ssh/sshd_config
    sed -i '/^PasswordAuthentication/c\PasswordAuthentication yes' /etc/ssh/sshd_config
    sed -i '/^#PermitRootLogin/c\PermitRootLogin yes' /etc/ssh/sshd_config
    sed -i '/^PermitRootLogin/c\PermitRootLogin yes' /etc/ssh/sshd_config
    echo "User/password ssh access is enabled."
else
    sed -i '/^PasswordAuthentication/c\PasswordAuthentication no' /etc/ssh/sshd_config
    sed -i '/^PermitRootLogin/c\PermitRootLogin no' /etc/ssh/sshd_config
    echo "User/password ssh access is disabled."
fi

# todo(amol): set umask for sftp
#UMASK=${UMASK:-022}
#sed -i "s|/usr/lib/ssh/sftp-server$|/usr/lib/ssh/sftp-server -u ${UMASK}|g" /etc/ssh/sshd_config

# set key auth in file

if [ ! -f /root/.ssh/authorized_keys ];then
    mkdir -p /root/.ssh
    chmod 700 /root/.ssh
    touch /root/.ssh/authorized_keys
    chmod 600 /root/.ssh/authorized_keys
fi

[[ -n "$PUBLIC_KEY" ]] && \
    [[ ! $(grep "${PUBLIC_KEY}" /root/.ssh/authorized_keys) ]] && \
    echo "$PUBLIC_KEY" >> /root/.ssh/authorized_keys && \
    echo "Public key from env variable added"

# todo(amol): back up old log files processed by logrotate
# [[ -f /config/logs/openssh/openssh.log ]] && \
#     mv /config/logs/openssh /config/logs/openssh.old.logs && \
#     mkdir -p /config/logs/openssh

# todo(amol): add log file info
# [[ ! -f /config/logs/loginfo.txt ]] && \
#     echo "The current log file is named \"current\". The rotated log files are gzipped, named with a TAI64N timestamp and a \".s\" extension" > /config/logs/loginfo.txt
